<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.gobiiproject</groupId>
        <artifactId>parent</artifactId>
        <version>GOBII Server 2.0_2018-12-21</version>
    </parent>

    <groupId>org.gobiiproject</groupId>
    <artifactId>gobii-web</artifactId>
    <packaging>war</packaging>

    <properties>

        <!-- Generic properties -->
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- Web -->
        <jsp.version>2.2</jsp.version>
        <jstl.version>1.2</jstl.version>
        <servlet.version>2.5</servlet.version>

        <!-- java-script related -->
        <grunt-plugin-version>1.5.1</grunt-plugin-version>

        <!-- distinguish between source docs that are hand-written and those that are generated by the toolchain -->
        <doc-location-source>${project.basedir}/src/main/resources/docs/source</doc-location-source>
        <doc-location-generated>${project.basedir}/src/main/resources/docs/generated</doc-location-generated>

    </properties>

    <repositories>
        <repository>
            <id>spring.repo</id>
            <name>spring repo</name>
            <url>http://repo.spring.io/plugins-release/</url>
        </repository>
    <repository>
        <snapshots>
            <enabled>false</enabled>
        </snapshots>
        <id>jcenter-releases</id>
        <name>jcenter</name>
        <url>http://jcenter.bintray.com</url>
    </repository>
    </repositories>

    <dependencies>

        <!-- gobii dependencies -->
        <dependency>
            <groupId>org.gobiiproject</groupId>
            <artifactId>gobii-api-model</artifactId>
        </dependency>

        <dependency>
            <groupId>org.gobiiproject</groupId>
            <artifactId>gobii-brapi</artifactId>
        </dependency>

        <dependency>
            <groupId>org.gobiiproject</groupId>
            <artifactId>gobii-model</artifactId>
        </dependency>

        <dependency>
            <groupId>org.gobiiproject</groupId>
            <artifactId>gobii-domain</artifactId>

            <!--
            **** Ideally we would want to prevent the transitive dependency of gobii-domain on gobii-dao from bringing
            **** the gobii-dao project into the web context: we always want entityaccess to the dao layer to go through the
            **** service layer (which is implemented in the domain). However, if we exclude the dependency, spring
            **** security filter chain initialization fails because the framework class that's consuming the
            **** user detail service can't get supply the user detail service with user dao class. So we're all on
            **** scout's honor to avoid accessing dao directly from anywhere but the service layer.
            -->
            <!--<exclusions>-->
            <!--<exclusion>-->
            <!--<groupId>org.gobiiproject</groupId>-->
            <!--<artifactId>gobii-dao</artifactId>-->
            <!--</exclusion>-->
            <!--</exclusions>-->
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.github.kongchen/swagger-maven-plugin -->
        <!-- https://mvnrepository.com/artifact/ch.netzwerg/paleo-core -->
        <!--<dependency>-->
        <!--<groupId>ch.netzwerg</groupId>-->
        <!--<artifactId>paleo-core</artifactId>-->
        <!--<version>0.11.0</version>-->
        <!--</dependency>-->


        <dependency>
            <groupId>com.github.kongchen</groupId>
            <artifactId>swagger-maven-plugin</artifactId>
            <version>3.1.7</version>
        </dependency>

        <dependency>
            <groupId>io.github.swagger2markup</groupId>
            <artifactId>swagger2markup</artifactId>
            <version>1.0.0</version>
        </dependency>


        <!--Spring WEB-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
        </dependency>

        <!-- Spring MVC -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
        </dependency>

        <!-- Spring and Transactions -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>

        <!--Spring ORM support-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.ldap</groupId>
            <artifactId>spring-ldap-core</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-taglibs</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-ldap</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-crypto</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!-- Spring and Transactions -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
        </dependency>

        <dependency>
            <groupId>org.jboss.logging</groupId>
            <artifactId>jboss-logging</artifactId>
        </dependency>
        <!--Hibernate-->
        <dependency>
            <groupId>org.hibernate.javax.persistence</groupId>
            <artifactId>hibernate-jpa-2.1-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
        </dependency>

        <!-- Test Artifacts -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient-cache</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpmime</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>fluent-hc</artifactId>
        </dependency>

        <!-- Liquibase -->
        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
        </dependency>

        <!-- DBCP -->
        <dependency>
            <groupId>commons-dbcp</groupId>
            <artifactId>commons-dbcp</artifactId>
        </dependency>

        <!-- servlet container provided dependencies -->
        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-servlet-api</artifactId>
        </dependency>

        <!-- Jackson JSON Processor -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <!-- Jackson JSON Mapper -->
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-mapper-asl</artifactId>
        </dependency>

        <!-- CSV Processor -->
        <dependency>
            <groupId>net.sf.opencsv</groupId>
            <artifactId>opencsv</artifactId>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>

        <!-- UPLOADS -->
        <!-- Apache Commons FileUpload -->
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
        </dependency>

    </dependencies>

    <build>
        <finalName>gobii-web</finalName>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>

            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>9.1.3.v20140225</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.2</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>


            <!--
               Delegates build to "grunt" for several phases
            -->
            <plugin>
                <groupId>pl.allegro</groupId>
                <artifactId>grunt-maven-plugin</artifactId>
                <version>${grunt-plugin-version}</version>
                <configuration>
                    <gruntBuildDirectory>${project.build.directory}/grunt</gruntBuildDirectory>
                </configuration>
                <executions>

                    <!--
                    Maven "validate" phase:
                    This execution will result in running npm install
                    -->
                    <execution>
                        <id>validate</id>
                        <phase>validate</phase>
                        <goals>
                            <!--<goal>create-resources</goal>-->
                            <goal>npm</goal><!-- setup grunt and plugin -->
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--
                Copying the index.adoc (and any additional source documentation files) from the source
                folder is the first step in the toolchain for generating documentation. I have set
                the phase for the entire documentation toolchain to package because the war file has
                to exist before it begins: the swagger2markup tool reads the class file from target,
                not the java file from source. All plugins for the documentation toolchain are
                in the package phase, so they run in the order in which they are defined here.
            -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <id>prepare-package-asciidoc</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <!-- Copy all asciidoc SOURCE files to where the plugin will them to be;
                                again, we want to maintain the clear distinction between our hand-written
                                docs and the ones that are generated by the tools -->
                            <outputDirectory>${doc-location-generated}/asciidoc</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${doc-location-source}/asciidoc</directory>
                                    <includes>
                                        <include>index.adoc</include>
                                        <include>gobii-api.adoc</include>
                                        <include>gobii-system.adoc</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>

                    <execution>
                        <id>prepare-package-nodemodules</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <!-- Copy all generated javascript files into the final directory structure -->
                            <!--<outputDirectory>${project.build.outputDirectory}/${project.artifactId}</outputDirectory>-->
                            <outputDirectory>${project.build.directory}/${project.build.finalName}/js/node_modules
                            </outputDirectory>
                            <resources>
                                <resource>
                                    <!-- Take the node-module code from where npm puts it -->
                                    <directory>${project.basedir}/node_modules</directory>
                                    <includes>
                                        <!-- *************************************************-->
                                        <!-- packageed javascript libraries to support angular2-->
                                        <!-- ***** GROUP 1: supporting libraries -->
                                        <include>es6-shim/es6-shim.min.js</include>
                                        <include>systemjs/dist/system-polyfills.js</include>
                                        <include>systemjs/dist/system.src.js</include>
                                        <include>rxjs/bundles/Rx.js</include>
                                        <include>bootstrap/dist/css/bootstrap.min.css</include>
                                        <include>bootswatch/cerulean/bootstrap.min.css</include>
                                        <include>bootswatch/cosmo/bootstrap.min.css</include>
                                        <include>bootswatch/cyborg/bootstrap.min.css</include>
                                        <include>bootswatch/darkly/bootstrap.min.css</include>
                                        <include>bootswatch/flatly/bootstrap.min.css</include>
                                        <include>bootswatch/fonts/bootstrap.min.css</include>
                                        <include>bootswatch/journal/bootstrap.min.css</include>
                                        <include>bootswatch/lumen/bootstrap.min.css</include>
                                        <include>bootswatch/paper/bootstrap.min.css</include>
                                        <include>bootswatch/readable/bootstrap.min.css</include>
                                        <include>bootswatch/sandstone/bootstrap.min.css</include>
                                        <include>bootswatch/simplex/bootstrap.min.css</include>
                                        <include>bootswatch/slate/bootstrap.min.css</include>
                                        <include>bootswatch/spacelab/bootstrap.min.css</include>
                                        <include>bootswatch/superhero/bootstrap.min.css</include>
                                        <include>bootswatch/united/bootstrap.min.css</include>
                                        <include>bootswatch/yeti/bootstrap.min.css</include>
                                        <include>zone.js/dist/zone.js</include>
                                        <include>core-js/client/shim.min.js</include>
                                        <include>reflect-metadata/Reflect.js</include>
                                        <include>rxjs/bundles/Rx.js</include>
                                        <include>rxjs/**</include>
                                        <include>ng2-uploader/**</include>
                                        <include>ng2-file-upload/**</include>
                                        <include>primeng/**</include>
                                        <include>font-awesome/css/font-awesome.min.css</include>
                                        <include>font-awesome/fonts/**</include>


                                        <!-- ***** GROUP 2: angular bundle files-->
                                        <include>@angular/core/bundles/core.umd.js</include>
                                        <include>@angular/common/bundles/common.umd.js</include>
                                        <include>@angular/compiler/bundles/compiler.umd.js</include>
                                        <include>@angular/router/bundles/router.umd.js</include>
                                        <include>@angular/http/bundles/http.umd.js</include>
                                        <include>@angular/platform-browser/bundles/platform-browser.umd.js</include>
                                        <include>@angular/platform-browser/bundles/platform-browser-animations.umd.js
                                        </include>
                                        <include>
                                            @angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js
                                        </include>
                                        <include>@angular/forms/bundles/forms.umd.js</include>
                                        <include>@angular/animations/bundles/animations.umd.js</include>
                                        <include>@angular/animations/bundles/animations-browser.umd.js</include>
                                        <include>@angular/animations/bundles/animations-browser.umd.js</include>

                                        <!-- ***** GROUP 3: angular bundle files-->
                                        <include>deep-freeze-strict/index.js</include>
                                        <include>ngrx-store-freeze/dist/index.js</include>
                                        <include>reselect/dist/reselect.js</include>
                                        <include>@ngrx/db/bundles/db.umd.js</include>
                                        <include>@ngrx/effects/bundles/effects.umd.js</include>
                                        <include>@ngrx/router-store/bundles/router-store.umd.js</include>
                                        <include>@ngrx/store/bundles/store.umd.js</include>
                                        <include>@ngrx/store-devtools/bundles/store-devtools.umd.js</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>


                    <execution>
                        <id>prepare-package-finaldocs</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <!-- copy html and pdf to distribution  -->
                            <outputDirectory>${project.build.directory}/${project.build.finalName}/docs
                            </outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${doc-location-generated}/pdf</directory>
                                    <includes>
                                        <include>gobii-api.pdf</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                                <resource>
                                    <directory>${doc-location-generated}/html</directory>
                                    <includes>
                                        <include>index.html</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>

                </executions>
            </plugin>

            <!-- swagger-maven-plugin generates yaml from swagger annotations in controller  -->
            <plugin>
                <groupId>com.github.kongchen</groupId>
                <artifactId>swagger-maven-plugin</artifactId>
                <version>3.1.3</version>
                <configuration>
                    <apiSources>
                        <apiSource>
                            <springmvc>true</springmvc>
                            <locations>
                                org.gobiiproject.gobiiweb.controllers
                            </locations>
                            <outputFormats>json,yaml</outputFormats>
                            <schemes>http, https</schemes>
                            <host>localhost:8081</host>
                            <basePath>/api</basePath>
                            <!-- content of description file overrides the <description>
                                element of the <info> tag below. This ends up as the
                                 Overview section in the HTML/PDF -->
                            <descriptionFile>${doc-location-source}/overview.txt</descriptionFile>
                            <info>
                                <title>GOBii API</title>
                                <version>1.0</version>
                                <!-- use markdown here because I'm using markdown for output,
                                if you need to use html or other markup language, you need to use your target language,
                                 and note escape your description for xml -->
                                <!--<description>-->
                                    <!--GOBii API-->
                                <!--</description>-->
                                <!--<termsOfService>-->
                                <!--http://www.github.com/kongchen/swagger-maven-plugin-->
                                <!--</termsOfService>-->
                                <!--<contact>-->
                                <!--<email>kongchen@gmail.com</email>-->
                                <!--<name>Kong Chen</name>-->
                                <!--<url>http://kongch.com</url>-->
                                <!--</contact>-->
                                <license>
                                    <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
                                    <name>Apache 2.0</name>
                                </license>
                            </info>
                            <securityDefinitions>
                                <securityDefinition>
                                    <name>basicAuth</name>
                                    <type>basic</type>
                                </securityDefinition>
                                <!--<securityDefinition>-->
                                <!--<json>/securityDefinition.json</json>-->
                                <!--</securityDefinition>-->
                            </securityDefinitions>
                            <!-- Support classpath or file absolute path here.
                            1) classpath e.g: "classpath:/markdown.hbs", "classpath:/templates/hello.html"
                            2) file e.g: "${basedir}/src/main/resources/markdown.hbs",
                                "${basedir}/src/main/resources/template/hello.html" -->
                            <swaggerDirectory>${doc-location-generated}/swagger</swaggerDirectory>
                            <!--<swaggerDirectory>${basedir}/generated/swagger-ui</swaggerDirectory>-->
                            <!--<templatePath>${basedir}/src/test/resources/strapdown.html.hbs</templatePath>-->
                            <!--<outputPath>${basedir}/generated/document.html</outputPath>-->
                            <!--<swaggerApiReader>com.wordnik.swagger.jaxrs.reader.DefaultJaxrsApiReader</swaggerApiReader>-->
                            <!--<attachSwaggerArtifact>true</attachSwaggerArtifact>-->
                            <!--<modelConverters>io.swagger.validator.BeanValidator</modelConverters>-->
                            <!--<swaggerExtensions>-->
                            <!--<swaggerExtension>com.example.VendorExtension</swaggerExtension>-->
                            <!--</swaggerExtensions>-->
                            <!--<enabledObjectMapperFeatures>-->
                            <!--<feature>com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_TO_STRING</feature>-->
                            <!--<feature>com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_NUMERIC_LEADING_ZEROS</feature>-->
                            <!--</enabledObjectMapperFeatures>-->
                            <!--<disabledObjectMapperFeatures>-->
                            <!--<feature>com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_EMPTY_BEANS</feature>-->
                            <!--</disabledObjectMapperFeatures>-->
                            <!--<operationIdFormat>{{className}}_{{methodName}}_{{httpMethod}}</operationIdFormat>-->
                            <!--<externalDocs>-->
                            <!--<description>Example external docs</description>-->
                            <!--<url>https://example.com/docs</url>-->
                            <!--</externalDocs>-->
                        </apiSource>
                    </apiSources>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin> <!-- swagger-maven-->



            <!-- swagger2markup-maven-plugin generates asciidoc from yaml  -->
            <plugin>
                <groupId>io.github.swagger2markup</groupId>
                <artifactId>swagger2markup-maven-plugin</artifactId>
              
                <version>1.0.0</version>
                <configuration>
                    <swaggerInput>${doc-location-generated}/swagger/swagger.yaml</swaggerInput>
                    <outputDir>${doc-location-generated}/asciidoc</outputDir>
            </configuration>
			<dependencies>
              <!-- https://mvnrepository.com/artifact/nl.jworks.markdown_to_asciidoc/markdown_to_asciidoc -->
					<dependency>
    				<groupId>nl.jworks.markdown_to_asciidoc</groupId>
    				<artifactId>markdown_to_asciidoc</artifactId>
    				<version>1.1</version>
				</dependency>
              </dependencies>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>convertSwagger2markup</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


            <!-- usage guide: https://github.com/beiliubei/maven-replacer-plugin/wiki/Usage-Guide
use tokenValueMap to specify a file containing the replacements -->
            <plugin>
                <groupId>com.google.code.maven-replacer-plugin</groupId>
                <artifactId>replacer</artifactId>
                <version>1.5.3</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <ignoreErrors>false</ignoreErrors>
                    <regex>false</regex>
                    <filesToInclude>
                        ${doc-location-generated}/asciidoc/definitions.adoc,
                        ${doc-location-generated}/asciidoc/gobii-system.adoc,
                        ${doc-location-generated}/asciidoc/paths.adoc,
                        ${doc-location-generated}/asciidoc/security.adoc
                    </filesToInclude>
                    <tokenValueMap>${doc-location-source}/tokens.txt</tokenValueMap>
                    <!--<replacements>-->
                    <!--<replacement>-->
                    <!--<token>PayloadEnvelopeAnalysisDTO</token>-->
                    <!--<value>AnalysisDTO</value>-->
                    <!--</replacement>-->
                    <!--</replacements>-->
                </configuration>
            </plugin>


            <!-- asciidoctor-maven-plugin should generate html from asciidoc -->
            <!--
            mvn clean swagger2markup:convertSwagger2markup asciidoctor:process-asciidoc
            process-asciidoc hits the primary configuration
            asciidoctor:generate-resources -->

            <plugin>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctor-maven-plugin</artifactId>
                <version>1.5.3</version>

                <!-- https://mvnrepository.com/artifact/org.jruby/jruby-complete -->

                <dependencies>
                    <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctorj-pdf</artifactId>
                        <version>1.5.0-alpha.16</version>
                    </dependency>
                    <!-- Comment this section to use the default jruby artifact provided by the plugin -->
                    <dependency>
                        <groupId>org.jruby</groupId>
                        <artifactId>jruby-complete</artifactId>
                        <version>9.1.17.0</version>
                    </dependency>
                    <!-- Comment this section to use the default AsciidoctorJ artifact provided by the plugin -->
                    <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctorj</artifactId>
                        <version>1.5.7</version>
                    </dependency>
                </dependencies>


                <!--<configuration>-->
                <!--<sourceDirectory>${basedir}/generated/asciidoc</sourceDirectory>-->
                <!--<sourceDocumentName>index.adoc</sourceDocumentName>-->
                <!--&lt;!&ndash;<backend>html5</backend>&ndash;&gt;-->
                <!--&lt;!&ndash;<backend>pdf</backend>&ndash;&gt;-->
                <!--<attributes>-->
                <!--<toc>left</toc>-->
                <!--&lt;!&ndash; define {generated} variable in index.adoc &ndash;&gt;-->
                <!--<generated>${basedir}/generated/asciidoc</generated>-->
                <!--</attributes>-->
                <!--</configuration>-->

                <executions>
                    <execution>
                        <id>generate-pdf-doc</id>
                        <phase>package</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <backend>pdf</backend>
                            <!-- Since 1.5.0-alpha.9 PDF back-end can use 'rouge' as well as 'coderay'
                            for source highlighting -->
                            <!-- Due to a known issue on windows, it is recommended to use 'coderay' until an new version of 'rouge' is released.
                                    see discussions: https://github.com/asciidoctor/asciidoctor-maven-examples/pull/58
                                                     https://github.com/asciidoctor/asciidoctorj-pdf/issues/3
                                                     https://github.com/jneen/rouge/issues/661
                            -->
                            <sourceDirectory>${doc-location-generated}/asciidoc</sourceDirectory>
                            <sourceDocumentName>gobii-api.adoc</sourceDocumentName>
                            <outputDirectory>${doc-location-generated}/pdf</outputDirectory>
                            <!--<backend>html5</backend>-->
                            <!--<backend>pdf</backend>-->
                            <attributes>
                                <toc>left</toc>
                                <!-- define {generated} variable in index.adoc -->
                                <generated>${doc-location-generated}/asciidoc</generated>
                            </attributes>

                            <!--<sourceHighlighter>coderay</sourceHighlighter>-->
                            <!--<attributes>-->
                            <!--<icons>font</icons>-->
                            <!--<pagenums/>-->
                            <!--<toc/>-->
                            <!--<idprefix/>-->
                            <!--<idseparator>-</idseparator>-->
                            <!--</attributes>-->
                        </configuration>
                    </execution>

                    <execution>
                        <id>asciidoc-to-html</id>
                        <phase>package</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <backend>html5</backend>
                            <sourceDirectory>${doc-location-generated}/asciidoc</sourceDirectory>
                            <sourceDocumentName>index.adoc</sourceDocumentName>
                            <outputDirectory>${doc-location-generated}/html</outputDirectory>
                            <!--<backend>html5</backend>-->
                            <!--<backend>pdf</backend>-->
                            <attributes>
                                <toc>left</toc>
                                <!-- define {generated} variable in index.adoc -->
                                <generated>${doc-location-generated}/asciidoc</generated>
                            </attributes>

                            <!--<sourceHighlighter>coderay</sourceHighlighter>-->
                            <!--
                            Scenarios for linking vs embedding assets:
                            Link to both stylesheets and images::
                              - don't set embedAssets option
                              - set linkcss attribute to true
                              - set imagesdir attribute to path relative to AsciiDoc source file
                              <attributes>
                                  <linkcss>true</linkcss>
                                  <imagesdir>./images</imagesdir>
                              </attributes>
                            Embed stylesheets and images::

                              - set embedAssets option to true
                              - don't set linkcss attribute
                              - set imagesdir attribute to path relative to project root
                              <embedAssets>true</embedAssets>
                              <attributes>
                                  <imagesdir>src/docs/asciidoc/images</imagesdir>
                              </attributes>
                            Link to stylesheets but embed images::

                              - set embedAssets option to true
                              - set linkcss attribute to true
                              - set imagesdir attribute to path relative to project root
                              <embedAssets>true</embedAssets>
                              <attributes>
                                  <linkcss>true</linkcss>
                                  <imagesdir>src/docs/asciidoc/images</imagesdir>
                              </attributes>
                            Embed stylesheets but link images (default)::

                              - don't set embedAssets option
                              - don't set linkcss attribute
                              - set imagesdir attribute to path relative to AsciiDoc source file
                              <attributes>
                                  <imagesdir>./images</imagesdir>
                              </attributes>
                            IMPORTANT: When you enable image embedding, you must qualify the path the the imagesdir, as shown above.
                            -->
                            <!--<attributes>-->
                            <!--<imagesdir>./images</imagesdir>-->
                            <!--<toc>left</toc>-->
                            <!--<icons>font</icons>-->
                            <!--<sectanchors>true</sectanchors>-->
                            <!--&lt;!&ndash; set the idprefix to blank &ndash;&gt;-->
                            <!--<idprefix/>-->
                            <!--<idseparator>-</idseparator>-->
                            <!--<docinfo1>true</docinfo1>-->
                            <!--</attributes>-->
                        </configuration>
                    </execution>

                </executions>

            </plugin>


        </plugins>
    </build>
</project>
